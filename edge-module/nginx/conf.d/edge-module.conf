js_set $js_oauth_token_endpoint getOAuth2TokenEndpoint;
js_set $js_oauth_token_introspect_endpoint getOAuth2TokenIntrospectEndpoint;
js_set $js_call_system_api get_call_system_api;

map $http_authorization $access_token { 
    "~*^bearer (.*)$" $1;
    default $http_authorization;
} 

# This is where token introspection responses will be stored if proxy_cache is enabled 
proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;

server {
    listen 443 ssl;
    proxy_ssl_server_name on;
    #証明書と鍵
    ssl_certificate /etc/nginx/ssl/localhost.pem;
    ssl_certificate_key /etc/nginx/ssl/localhost.key;
    #暗号スイート
    #高セキュリティ型
    #ssl_ciphers "DHE-RSA-AES256-GCM-SHA384";
    #スコープ選択画面を使用する場合はブラウザからアクセスできるように推奨セキュリティ型を追加
    ssl_ciphers "DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-CAMELLIA128-SHA:DHE-RSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:CAMELLIA128-SHA:AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-CAMELLIA";
    #プロトコルバージョン
    #高セキュリティ型
    ssl_protocols TLSv1.2;
    #暗号スイート順序サーバ優先
    ssl_prefer_server_ciphers on;
    #DHEの鍵パラメータファイル
    ssl_dhparam /etc/nginx/ssl/dh2048.pem;
    #HTTP Strict Transport Security（HSTS）の設定
    #OCSP Staplingの設定
    ssl_stapling on;
    ssl_stapling_verify on;

    expires 0;
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header Pragma no-cache always;
    #セキュリティ関係のヘッダ
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options deny always;
    add_header Content-Security-Policy "default-src 'none'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    #認証認可サーバ 
    set $oauth_token_hint                "access_token";
    set $oauth_token_endpoint            $js_oauth_token_endpoint;
    set $oauth_token_introspect_endpoint $js_oauth_token_introspect_endpoint;

    lua_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
    lua_ssl_verify_depth 2;
    #resolver XXX.XXX.XXX.XXX ipv6=off;

    #============================================================================
    #swagger呼び出し
    location /swaggerui/ {
        proxy_pass http://swaggerui:8080/;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    } 
    
    location /swaggereditor/ {
        proxy_pass http://swaggereditor:8080/;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }

    location /jsonserver/ {
        proxy_pass http://jsonserver/;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }
    #============================================================================
    
    location /v1/auth {
        access_by_lua_block {
            local arg_scope = "openid"
            local args, err = ngx.req.get_uri_args()
            if err == "truncated" then
            -- one can choose to ignore or reject the current request here
            end
            if args["scope"] ~= nil then
                if type(args["scope"]) == "table" then
                    arg_scope = arg_scope .. " " .. table.concat(args["scope"], " ")
                else
                    arg_scope = arg_scope .. " " .. args["scope"]
                end
            end
            if args["client_id"] then
                arg_scope = arg_scope .. " " .. args["client_id"]
            end

            local state = ""
            local local_post_logout_redirect_uri = ""
            if args["state"] then
                state = args["state"]
                local_post_logout_redirect_uri = ngx.var.scheme .. "://" .. ngx.var.http_host .. "/scope.html" .. "?state=" .. state 
            end
            
            --設定ファイル読み込み
            local file,val;
            local json = require 'cjson';
            local file_path = "/etc/nginx/resources/config.json";
            local text = "";
            file = io.open(file_path,"r");
            for m in file:lines() do 
                text = text .. m
            end 
            val = json.decode(text);
            io.close(file);

            local opts = {
                --認可コードをもらうためのリダイレクト先を設定。実ファイルは存在しなくていい。authenticate()の中で認可コードを受け取った後luaが元のリクエスト先/authにリダイレクトさせる。リダイレクトしたときは認証済みのため後ろの処理が実行される
                redirect_uri = val.openid_connect.redirect_uri,
                discovery = val.oauth.discovery,
                client_id = val.client_id,
                client_secret = val.client_secret,
                --redirect_uriにhttpsを入れていても動かすとhttpになってしまうため設定
                redirect_uri_scheme = "https",
                --ここにリクエストすると認証認可サーバからログアウトできる。
                logout_path = "/v1/auth/logout-and-select-scope",
                --logout_pathでログアウト後にリダイレクトするURL
                post_logout_redirect_uri = local_post_logout_redirect_uri,
                session_contents = {access_token=true},
                scope = arg_scope,
                --同意画面を常に出す
                prompt = "consent"
            }

            -- call authenticate for OpenID Connect user authentication
            local res, err = require("resty.openidc").authenticate(opts)
            if err then
                return ngx.redirect(val.openid_connect.no_consent_url, ngx.HTTP_MOVED_TEMPORARILY)
            end

            --generate random string
            local length = 10
            local randomkey = ""
            for i = 1, length do
                randomkey = randomkey .. string.char(math.random(97, 122))
            end

            local nonce = randomkey
            local key_token_map = ngx.shared.key_token_map
            --res.access_tokenのままセットした場合、ログアウトするとres.access_tokenも消えるため文字列にしてセット
            key_token_map:set(nonce, tostring(res.access_token))

            return ngx.redirect(val.openid_connect.post_authorized_url .. "?client_id=" .. args["client_id"] .. "&nonce=" .. nonce .. "&state=" .. state, ngx.HTTP_MOVED_TEMPORARILY)

        }

        default_type text/html;
        root         /usr/share/nginx/html;
        index        index.html index.htm;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }

    location /v1/reception_tsudo {
        auth_basic           "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        #luaでセットするために先に変数を定義する
        set $http_x_access_token '';

        access_by_lua_block {
            --POSTのbodyを読み込む
            ngx.req.read_body()
            --args(table)にはURIデコードされた値が入る
            local args, err = ngx.req.get_post_args()
            local arg_query = args["nonce"]
            if (arg_query ~= nil and arg_query ~= "" and type(arg_query) ~= "boolean") then
                local key_token_map = ngx.shared.key_token_map
                local access_token = key_token_map:get(args["nonce"])
                key_token_map:delete(args["nonce"])
                --ngx.log(ngx.INFO, "access_token:" .. access_token)
                ngx.var.http_x_access_token = access_token
                --ngx.log(ngx.INFO, "http_x_access_token:" .. ngx.var.http_x_access_token)
            end
        }

        js_content tsudodoi;
    }

    #==========================
    location = /_oauth2_client_credentials_request {
        # アクセストークン要求
        internal;
        proxy_method               POST;
        proxy_pass_request_headers off;
        proxy_set_header           Authorization $arg_authorization;
        proxy_set_header           Content-Type "application/x-www-form-urlencoded";
        proxy_pass                 $oauth_token_endpoint;
        
        proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
        proxy_ssl_verify              on;
        proxy_ssl_verify_depth        2;
        proxy_ssl_session_reuse       on;
    }  
    
    location = /v1/reception_jizen {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # CORS Swagger UIからテストしたい場合に設定
        # if ($request_method = 'OPTIONS') {
        #     add_header Access-Control-Allow-Origin '*';
        #     add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH';
        #     add_header Access-Control-Allow-Headers 'Origin, Authorization, Accept, Content-Type';
        #     add_header Access-Control-Max-Age 3600;
        #     add_header Content-Type 'text/plain; charset=UTF-8';
        #     add_header Content-Length 0;
        #     return 204;
        # }
        # add_header Access-Control-Allow-Origin '*' always;

        # アクセストークン要求
        js_content get_access_token;
    }
   
    #==========================
    location = /_call_edgemodule{
        internal;
        proxy_pass_request_headers    off;
        proxy_set_header              Authorization "Bearer $arg_access_token";
        proxy_set_header              X-Request-ID $request_id;
        proxy_set_header              Content-Type $arg_contentType;
        proxy_set_header              Accept $arg_accept;
        proxy_ssl_protocols           TLSv1.2;
        proxy_ssl_ciphers             "DHE-RSA-AES256-GCM-SHA384";
        proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
        proxy_ssl_verify              on;
        proxy_ssl_verify_depth        2;
        proxy_pass                    $arg_call_uri;
        
        proxy_ssl_session_reuse    on;
    }
    #============================================================================
    #データストア側
    location / { 

        # CORS Swagger UIからテストしたい場合に設定
        # if ($request_method = 'OPTIONS') {
        #     add_header Access-Control-Allow-Origin '*';
        #     add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH';
        #     add_header Access-Control-Allow-Headers 'Origin, Authorization, Accept, Content-Type';
        #     add_header Access-Control-Max-Age 3600;
        #     add_header Content-Type 'text/plain; charset=UTF-8';
        #     add_header Content-Length 0;
        #     return 204;
        # }
        # add_header Access-Control-Allow-Origin '*' always;

        set $call_api_method $request_method;
        auth_request /_oauth2_token_introspection;
        # Any member of the token introspection response is available as $sent_http_token_member 
        auth_request_set $token_response $sent_http_token_response;

        set $x_call_api_uri $request_uri;
        js_content call_system_api_init;
    }
    
    location = /_oauth2_token_introspection { 
        # This location implements an auth_request server that uses the JavaScript 
        # module to perform the token introspection request. 
        internal;
        js_content introspectAccessToken;
    } 
    
    #データストアを呼び出す
    location = /_call_system_api { 
        internal;
        proxy_pass_request_headers off;
        proxy_pass                 $js_call_system_api$is_args$args;
        proxy_set_header           Content-Type $http_content_type;
        proxy_set_header           Accept $http_accept;

        proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
        proxy_ssl_verify              on;
        proxy_ssl_verify_depth        2;
        proxy_ssl_session_reuse       on;

    }

    #==========================
    location = /_oauth2_send_introspection_request { 
        # This location is called by introspectAccessToken(). We use the proxy_ 
        # directives to construct an OAuth 2.0 token introspection request, as per: 
        #  https://tools.ietf.org/html/rfc7662#section-2 
        internal;
        gunzip on; # Decompress if necessary 
    
        proxy_method               POST;
        proxy_pass_request_headers off;
        proxy_set_header           Authorization $arg_authorization;
        proxy_set_header           Content-Type "application/x-www-form-urlencoded";
        proxy_set_body             "token=$arg_token&token_hint=$oauth_token_hint";
        proxy_pass                 $oauth_token_introspect_endpoint;

        proxy_cache           token_responses; # Enable caching of token introspection responses 
        proxy_cache_key       $access_token;   # Cache the response for each unique access token 
        proxy_cache_lock      on;              # Don't allow simultaneous requests for same token 
        proxy_cache_valid     200 10s;         # How long to use cached introspection responses 
        proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server 
        proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these 
       
        proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
        proxy_ssl_verify              on;
        proxy_ssl_verify_depth        2;
        proxy_ssl_session_reuse       on;
    } 
        
    location = /favicon.ico {
        log_not_found off;
    }

    location /scope.html {
        default_type  text/html;
        root          /usr/share/nginx/html;
        index         index.html index.htm;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 444 451 /40x.json;
    location /40x.json {
        internal;
        js_content getClientErrorResponse;
    }

    error_page 500 501 502 503 504 505 506 507 508 510 511 /50x.json;
    location /50x.json {
        internal;
        js_content  getServerErrorResponse;
    }
}