# 参考 https://developers.redhat.com/blog/2018/10/08/configuring-nginx-keycloak-oauth-oidc/
access_by_lua_block {
    local arg_scope = "openid"
    local args, err = ngx.req.get_uri_args()
    if err == "truncated" then
    -- one can choose to ignore or reject the current request here
    end
    if args["scope"] ~= nil then
        if type(args["scope"]) == "table" then
            arg_scope = arg_scope .. " " .. table.concat(args["scope"], " ")
        else
            arg_scope = arg_scope .. " " .. args["scope"]
        end
    end
    if args["client_id"] then
        arg_scope = arg_scope .. " " .. args["client_id"]
    end

    local state = ""
  
    if args["state"] then
       state = args["state"]
    end

    local local_random = args["random"]
    local local_force_reauthorize = false
    local random_map = ngx.shared.random_map
    local is_exist = random_map:get(local_random)
    if ngx.var.uri == "/v1/auth/redirect_uri" then
        local_force_reauthorize = false
    elseif is_exist then
        local_force_reauthorize = false
        random_map:delete(local_random)
    else
        local_force_reauthorize = true
        random_map:set(local_random, true)
    end
    
    --設定ファイル読み込み
    local file,val;
    local json = require 'cjson';
    local file_path = "/etc/nginx/resources/config.json";
    local text = "";
    file = io.open(file_path,"r");
    for m in file:lines() do 
        text = text .. m
    end 
    val = json.decode(text);
    io.close(file);

    local opts = {
        --認可コードをもらうためのリダイレクト先を設定。実ファイルは存在しなくていい。authenticate()の中で認可コードを受け取った後luaが元のリクエスト先/authにリダイレクトさせる。リダイレクトしたときは認証済みのため後ろの処理が実行される
        redirect_uri = val.openid_connect.redirect_uri,
        discovery = val.oauth.discovery,
        client_id = val.client_id,
        client_secret = val.client_secret,
         --redirect_uriにhttpsを入れていても動かすとhttpになってしまうので暫定の設定
        redirect_uri_scheme = "https",
        session_contents = {access_token=true},
        scope = arg_scope,
        --同意画面を常に出す
        prompt = "consent",
        force_reauthorize = local_force_reauthorize
    }

    -- call authenticate for OpenID Connect user authentication
    local res, err = require("resty.openidc").authenticate(opts)
    if err then
        return ngx.redirect(val.openid_connect.no_consent_url, ngx.HTTP_MOVED_TEMPORARILY)
    end

    local resty_random = require("resty.random")
    local resty_string = require("resty.string")
    local nonce = resty_string.to_hex(resty_random.bytes(16))
    
    local key_token_map = ngx.shared.key_token_map
    --res.access_tokenのままセットした場合、ログアウトするとres.access_tokenも消えるため文字列にしてセット
    key_token_map:set(nonce, tostring(res.access_token))

    return ngx.redirect(val.openid_connect.post_authorized_url .. "?client_id=" .. args["client_id"] .. "&nonce=" .. nonce .. "&state=" .. state, ngx.HTTP_MOVED_TEMPORARILY)

}