js_set $js_oauth_token_endpoint getOAuth2TokenEndpoint;
js_set $js_oauth_token_introspect_endpoint getOAuth2TokenIntrospectEndpoint;
js_set $js_call_system_api get_call_system_api;
js_set $js_call_system_api_authorization getCallSystemApiAuthorization;
js_set $js_call_system_api_api_key getCallSystemApiApiKey;

map $http_authorization $access_token { 
    "~*^bearer (.*)$" $1;
    default $http_authorization;
} 

geo $isAllowedOnlyPrivateIPs {
    default        disable;
    127.0.0.0/8    allow;
    10.0.0.0/8     allow;
    172.16.0.0/12  allow;
    192.168.0.0/16 allow; 
}

#Rate Limiting
include conf.d/rate-limit.http.conf;


server {
    listen 443 ssl;
    proxy_ssl_server_name on;
    #証明書と鍵
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/private.key;
    #暗号スイート
    #高セキュリティ型
    #ssl_ciphers "DHE-RSA-AES256-GCM-SHA384";
    #スコープ選択画面を使用する場合はブラウザからアクセスできるように推奨セキュリティ型を追加
    ssl_ciphers "ECDHE+AESGCM:DHE+aRSA+AESGCM:ECDHE+AESCCM:DHE+aRSA+AESCCM:ECDHE+CHACHA20:DHE+aRSA+CHACHA20:+AES128:+DHE";
    #プロトコルバージョン
    #高セキュリティ型
    ssl_protocols TLSv1.2 TLSv1.3;
    #暗号スイート順序サーバ優先
    ssl_prefer_server_ciphers on;
    #DHEの鍵パラメータファイル
    ssl_dhparam /etc/nginx/ssl/dh2048.pem;
    #ECDHE 鍵交換で使用するグループの指定例
    ssl_ecdh_curve X25519:X448:P-256:P-384:P-521;
    #HTTP Strict Transport Security（HSTS）の設定
    #OCSP Staplingの設定
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    expires 0;
    add_header Cache-Control "private, no-cache, no-store, must-revalidate" always;
    add_header Pragma no-cache always;
    #セキュリティ関係のヘッダ
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options DENY always;
    add_header Content-Security-Policy "default-src 'none'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "no-referrer" always;

    #認証認可サーバ 
    set $oauth_token_hint                "access_token";
    set $oauth_token_endpoint            $js_oauth_token_endpoint;
    set $oauth_token_introspect_endpoint $js_oauth_token_introspect_endpoint;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    include conf.d/lua-ssl-verify-depth.conf;
    include conf.d/resolver.conf;

    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    #============================================================================
    #swagger呼び出し
    location /swaggerui/ {
        proxy_pass http://127.0.0.1:8080/;
        include conf.d/add-header-for-screen.conf;
    } 
    
    location /swaggereditor/ {
        proxy_pass http://127.0.0.1:8081/;
        include conf.d/add-header-for-screen.conf;
    }

    location /jsonserver/ {
        proxy_pass http://127.0.0.1:3000/;
        include conf.d/add-header-for-screen.conf;
    }
    #============================================================================
    #データ要求システム側
    location ~ ^/v1/auth/(redirect_uri|api){
        include conf.d/auth.lua.conf;

        default_type text/html;
        root         /usr/share/nginx/html;
        index        index.html index.htm;
    }

    location /v1/auth {
        set_by_lua_block $local_redirect_uri {
            local args, err = ngx.req.get_uri_args()
            local resty_random = require("resty.random")
            local resty_string = require("resty.string")

            local random = resty_string.to_hex(resty_random.bytes(16))
            args["random"] = random
            ngx.req.set_uri_args(args)
            return ngx.var.scheme .. "://" .. ngx.var.http_host .. "/v1/auth/api"
        }
        proxy_pass $local_redirect_uri$is_args$args;
    }

    location /v1/reception_tsudo {
        auth_basic           "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        #luaでセットするために先に変数を定義する
        set $http_x_access_token '';

        access_by_lua_block {
            --POSTのbodyを読み込む
            ngx.req.read_body()
            --args(table)にはURIデコードされた値が入る
            local args, err = ngx.req.get_post_args()
            local arg_query = args["nonce"]
            if (arg_query ~= nil and arg_query ~= "" and type(arg_query) ~= "boolean") then
                local key_token_map = ngx.shared.key_token_map
                local access_token = key_token_map:get(args["nonce"])
                key_token_map:delete(args["nonce"])
                --ngx.log(ngx.INFO, "access_token:" .. access_token)
                ngx.var.http_x_access_token = access_token
                --ngx.log(ngx.INFO, "http_x_access_token:" .. ngx.var.http_x_access_token)
            end
        }

        js_content tsudodoi;
    }

    #==========================
    location = /_oauth2_client_credentials_request {
        # アクセストークン要求
        internal;
        proxy_method               POST;
        proxy_pass_request_headers off;
        proxy_set_header           Authorization $arg_authorization;
        proxy_set_header           Content-Type "application/x-www-form-urlencoded";
        proxy_pass                 $oauth_token_endpoint;
        
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_verify              on;
        include conf.d/proxy-ssl-verify-depth.conf;
        proxy_ssl_session_reuse       on;
    }  
    
    location = /v1/reception_jizen {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # CORS Swagger UIからテストしたい場合に設定
        # if ($request_method = 'OPTIONS') {
        #     add_header Access-Control-Allow-Origin '*';
        #     add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH';
        #     add_header Access-Control-Allow-Headers 'Origin, Authorization, Accept, Content-Type';
        #     add_header Access-Control-Max-Age 3600;
        #     add_header Content-Type 'text/plain; charset=UTF-8';
        #     add_header Content-Length 0;
        #     return 204;
        # }
        # add_header Access-Control-Allow-Origin '*' always;

        # アクセストークン要求
        js_content get_access_token;
    }
   
    #==========================
    location = /_call_edgemodule{
        internal;
        proxy_pass_request_headers    off;
        proxy_set_header              Authorization "Bearer $x_access_token";
        proxy_set_header              X-Request-ID $request_id;
        proxy_set_header              Content-Type $x_contentType;
        proxy_set_header              Accept $x_accept;
        proxy_set_header              Cache-Control "no-store";
        proxy_ssl_protocols           TLSv1.2 TLSv1.3;
        proxy_ssl_ciphers             "ECDHE+AESGCM:DHE+aRSA+AESGCM:ECDHE+AESCCM:DHE+aRSA+AESCCM:ECDHE+CHACHA20:DHE+aRSA+CHACHA20:+AES128:+DHE";
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_verify              on;
        include conf.d/proxy-ssl-verify-depth.conf;

        #luaでセットするために先に変数を定義する
        set $x_access_token '';
        set $x_contentType '';
        set $x_accept '';

        set_by_lua_block $x_call_uri {
            local args, err = ngx.req.get_uri_args()
            ngx.var.x_access_token = args["access_token"]
            ngx.var.x_contentType = args["contentType"]
            ngx.var.x_accept = args["accept"]
            local x_call_uri = args["call_uri"]
            args["access_token"] =nil
            args["call_uri"]= nil
            args["contentType"]= nil
            args["accept"]=nil
            ngx.req.set_uri_args(args)
            return x_call_uri
        }

        proxy_pass                    $x_call_uri$is_args$args;
        proxy_ssl_session_reuse    on;
    }
    #============================================================================
    #データ提供システム側
    location / { 

        # CORS Swagger UIからテストしたい場合に設定
        # if ($request_method = 'OPTIONS') {
        #     add_header Access-Control-Allow-Origin '*';
        #     add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH';
        #     add_header Access-Control-Allow-Headers 'Origin, Authorization, Accept, Content-Type';
        #     add_header Access-Control-Max-Age 3600;
        #     add_header Content-Type 'text/plain; charset=UTF-8';
        #     add_header Content-Length 0;
        #     return 204;
        # }
        # add_header Access-Control-Allow-Origin '*' always;
        
        #Rate Limiting
        include conf.d/rate-limit.location.conf;

        set $call_api_method $request_method;
        auth_request /_oauth2_token_introspection;
        # Any member of the token introspection response is available as $sent_http_token_member 
        auth_request_set $token_response $sent_http_token_response;

        set $x_call_api_uri $request_uri;
        js_content call_system_api_init;
    }
    
    location = /_oauth2_token_introspection { 
        # This location implements an auth_request server that uses the JavaScript 
        # module to perform the token introspection request. 
        internal;
        js_content introspectAccessToken;
    } 
    
    #データ提供システムを呼び出す
    location = /_call_system_api { 
        internal;
        proxy_pass_request_headers off;
        proxy_pass                 $js_call_system_api$is_args$args;
        proxy_set_header           Content-Type $http_content_type;
        proxy_set_header           Accept $http_accept;
        proxy_set_header           Authorization $js_call_system_api_authorization;
        include conf.d/api.header.conf;

        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_verify              on;
        include conf.d/proxy-ssl-verify-depth.conf;
        proxy_ssl_session_reuse       on;

    }

    #==========================
    location = /_oauth2_send_introspection_request { 
        # This location is called by introspectAccessToken(). We use the proxy_ 
        # directives to construct an OAuth 2.0 token introspection request, as per: 
        #  https://tools.ietf.org/html/rfc7662#section-2 
        internal;
        gunzip on; # Decompress if necessary 
    
        proxy_method               POST;
        proxy_pass_request_headers off;
        proxy_set_header           Authorization $arg_authorization;
        proxy_set_header           Content-Type "application/x-www-form-urlencoded";
        proxy_set_body             "token=$arg_token&token_hint=$oauth_token_hint";
        proxy_pass                 $oauth_token_introspect_endpoint;
     
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_verify              on;
        include conf.d/proxy-ssl-verify-depth.conf;
        proxy_ssl_session_reuse       on;
    } 
        
    location = /favicon.ico {
        log_not_found off;
    }

    location /scope.html {
        default_type  text/html;
        charset UTF-8;
        root          /usr/share/nginx/html;
        content_by_lua_file conf.d/scope.lua;
        include conf.d/add-header-for-screen.conf;

    }
    
    location /scope-info/ {
        default_type  text/html;
        root          /usr/share/nginx/html;
        include conf.d/add-header-for-screen.conf;
        error_page 403 =404 /40x.json;
    }

    location = /communication/status {
        if ( $isAllowedOnlyPrivateIPs = "disable" ){ return 444; }
        js_content checkAuthorizationServer;
    }
    
    location = /healthcheck {
         return 200;
    }
    
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /40x.json;
    location /40x.json {
        internal;
        js_content getClientErrorResponse;
    }

    error_page 500 501 502 503 504 505 506 507 508 510 511 /50x.json;
    location /50x.json {
        internal;
        js_content  getServerErrorResponse;
    }
}